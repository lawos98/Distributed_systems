//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: subscriptions.proto

package proto;

@kotlin.jvm.JvmSynthetic
public inline fun weatherResponse(block: proto.WeatherResponseKt.Dsl.() -> kotlin.Unit): proto.WeatherResponse =
  proto.WeatherResponseKt.Dsl._create(proto.WeatherResponse.newBuilder()).apply { block() }._build()
public object WeatherResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: proto.WeatherResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: proto.WeatherResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): proto.WeatherResponse = _builder.build()

    /**
     * <code>string city = 1;</code>
     */
    public var city: kotlin.String
      @JvmName("getCity")
      get() = _builder.getCity()
      @JvmName("setCity")
      set(value) {
        _builder.setCity(value)
      }
    /**
     * <code>string city = 1;</code>
     */
    public fun clearCity() {
      _builder.clearCity()
    }

    /**
     * <code>.subscriptions.WeatherType type = 2;</code>
     */
    public var type: proto.WeatherType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>.subscriptions.WeatherType type = 2;</code>
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * <code>float temperature = 3;</code>
     */
    public var temperature: kotlin.Float
      @JvmName("getTemperature")
      get() = _builder.getTemperature()
      @JvmName("setTemperature")
      set(value) {
        _builder.setTemperature(value)
      }
    /**
     * <code>float temperature = 3;</code>
     */
    public fun clearTemperature() {
      _builder.clearTemperature()
    }

    /**
     * <code>float humidity = 4;</code>
     */
    public var humidity: kotlin.Float
      @JvmName("getHumidity")
      get() = _builder.getHumidity()
      @JvmName("setHumidity")
      set(value) {
        _builder.setHumidity(value)
      }
    /**
     * <code>float humidity = 4;</code>
     */
    public fun clearHumidity() {
      _builder.clearHumidity()
    }

    /**
     * <code>float wind = 5;</code>
     */
    public var wind: kotlin.Float
      @JvmName("getWind")
      get() = _builder.getWind()
      @JvmName("setWind")
      set(value) {
        _builder.setWind(value)
      }
    /**
     * <code>float wind = 5;</code>
     */
    public fun clearWind() {
      _builder.clearWind()
    }

    /**
     * <code>float pressure = 6;</code>
     */
    public var pressure: kotlin.Float
      @JvmName("getPressure")
      get() = _builder.getPressure()
      @JvmName("setPressure")
      set(value) {
        _builder.setPressure(value)
      }
    /**
     * <code>float pressure = 6;</code>
     */
    public fun clearPressure() {
      _builder.clearPressure()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun proto.WeatherResponse.copy(block: proto.WeatherResponseKt.Dsl.() -> kotlin.Unit): proto.WeatherResponse =
  proto.WeatherResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()
