# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import subscriptions_pb2 as subscriptions__pb2


class WeatherServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetWeatherByTemperature = channel.unary_stream(
                '/subscriptions.WeatherService/GetWeatherByTemperature',
                request_serializer=subscriptions__pb2.WeatherTemperatureRequest.SerializeToString,
                response_deserializer=subscriptions__pb2.WeatherResponse.FromString,
                )
        self.GetWeatherByHumidity = channel.unary_stream(
                '/subscriptions.WeatherService/GetWeatherByHumidity',
                request_serializer=subscriptions__pb2.WeatherHumidityRequest.SerializeToString,
                response_deserializer=subscriptions__pb2.WeatherResponse.FromString,
                )
        self.GetWeatherByWind = channel.unary_stream(
                '/subscriptions.WeatherService/GetWeatherByWind',
                request_serializer=subscriptions__pb2.WeatherWindRequest.SerializeToString,
                response_deserializer=subscriptions__pb2.WeatherResponse.FromString,
                )
        self.GetWeatherByPressure = channel.unary_stream(
                '/subscriptions.WeatherService/GetWeatherByPressure',
                request_serializer=subscriptions__pb2.WeatherPressureRequest.SerializeToString,
                response_deserializer=subscriptions__pb2.WeatherResponse.FromString,
                )
        self.GetWeatherByType = channel.unary_stream(
                '/subscriptions.WeatherService/GetWeatherByType',
                request_serializer=subscriptions__pb2.WeatherTypeRequest.SerializeToString,
                response_deserializer=subscriptions__pb2.WeatherResponse.FromString,
                )


class WeatherServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetWeatherByTemperature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWeatherByHumidity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWeatherByWind(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWeatherByPressure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWeatherByType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WeatherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetWeatherByTemperature': grpc.unary_stream_rpc_method_handler(
                    servicer.GetWeatherByTemperature,
                    request_deserializer=subscriptions__pb2.WeatherTemperatureRequest.FromString,
                    response_serializer=subscriptions__pb2.WeatherResponse.SerializeToString,
            ),
            'GetWeatherByHumidity': grpc.unary_stream_rpc_method_handler(
                    servicer.GetWeatherByHumidity,
                    request_deserializer=subscriptions__pb2.WeatherHumidityRequest.FromString,
                    response_serializer=subscriptions__pb2.WeatherResponse.SerializeToString,
            ),
            'GetWeatherByWind': grpc.unary_stream_rpc_method_handler(
                    servicer.GetWeatherByWind,
                    request_deserializer=subscriptions__pb2.WeatherWindRequest.FromString,
                    response_serializer=subscriptions__pb2.WeatherResponse.SerializeToString,
            ),
            'GetWeatherByPressure': grpc.unary_stream_rpc_method_handler(
                    servicer.GetWeatherByPressure,
                    request_deserializer=subscriptions__pb2.WeatherPressureRequest.FromString,
                    response_serializer=subscriptions__pb2.WeatherResponse.SerializeToString,
            ),
            'GetWeatherByType': grpc.unary_stream_rpc_method_handler(
                    servicer.GetWeatherByType,
                    request_deserializer=subscriptions__pb2.WeatherTypeRequest.FromString,
                    response_serializer=subscriptions__pb2.WeatherResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'subscriptions.WeatherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WeatherService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetWeatherByTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/subscriptions.WeatherService/GetWeatherByTemperature',
            subscriptions__pb2.WeatherTemperatureRequest.SerializeToString,
            subscriptions__pb2.WeatherResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWeatherByHumidity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/subscriptions.WeatherService/GetWeatherByHumidity',
            subscriptions__pb2.WeatherHumidityRequest.SerializeToString,
            subscriptions__pb2.WeatherResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWeatherByWind(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/subscriptions.WeatherService/GetWeatherByWind',
            subscriptions__pb2.WeatherWindRequest.SerializeToString,
            subscriptions__pb2.WeatherResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWeatherByPressure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/subscriptions.WeatherService/GetWeatherByPressure',
            subscriptions__pb2.WeatherPressureRequest.SerializeToString,
            subscriptions__pb2.WeatherResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWeatherByType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/subscriptions.WeatherService/GetWeatherByType',
            subscriptions__pb2.WeatherTypeRequest.SerializeToString,
            subscriptions__pb2.WeatherResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
